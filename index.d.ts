/** Declaration file generated by dts-gen */

export class BaseField {
    constructor(...args: any[]);

    configure(...args: any[]): void;

    getDBValue(...args: any[]): void;

    setDbValue(...args: any[]): void;

    setValue(...args: any[]): void;

}

export class Model {
    constructor(...args: any[]);

    delete(...args: any[]): void;

    fromObject(...args: any[]): void;

    save(...args: any[]): void;

    toObject(...args: any[]): void;

    update(...args: any[]): void;

    upsert(...args: any[]): void;

    static fromObject(...args: any[]): void;

    static init(...args: any[]): void;

    static parent(...args: any[]): void;

}

export function Field(...args: any[]): any;

export function Fireo(...args: any[]): any;

export namespace Field {
    function Boolean(...args: any[]): void;

    function DateTime(...args: any[]): void;

    function GeoPoint(...args: any[]): void;

    function ID(...args: any[]): void;

    function List(...args: any[]): void;

    function Map(...args: any[]): void;

    function Number(...args: any[]): void;

    function Reference(...args: any[]): void;

    function Text(...args: any[]): void;

}

export namespace Fireo {
    function GeoPoint(...args: any[]): void;

    function batch(...args: any[]): void;

    function increment(...args: any[]): void;

    function listRemove(...args: any[]): void;

    function listUnion(...args: any[]): void;

    function runTransaction(...args: any[]): void;

    namespace connection {
        const conn: {
        };

        const connection: {
        };

        function setting(...args: any[]): void;

    }

}

export namespace Model {
    namespace collection {
        function cursor(...args: any[]): void;

        function fetch(...args: any[]): void;

        function get(...args: any[]): void;

        function limit(...args: any[]): void;

        function limitToLast(...args: any[]): void;

        function offset(...args: any[]): void;

        function orderBy(...args: any[]): void;

        function parent(...args: any[]): void;

        function transaction(...args: any[]): void;

        function where(...args: any[]): void;

    }

}

